/*
* This file is part of Lua API++ library (https://github.com/OldFisher/lua-api-pp)
* distributed under MIT License (http://opensource.org/licenses/MIT).
* See license.txt for details.
* (c) 2014 OldFisher
*/

/*!
* @page changelog Changelog
*
* @section changes_2015_02_12_0 2015-02-12-0
* - RegistryKey now can be:
*  + @ref lua::RegistryKey::get "queried" for underlying key value;
*  + @ref lua::RegistryKey::RegistryKey() "default-initialized" to empty value;
*  + checked to be non-empty;
*  + @ref lua::RegistryKey::operator == "equality-" and @ref lua::RegistryKey::operator != "inequality-"checked against other RegistryKeys;
*  + @ref lua::RegistryKey::kill "killed" to become empty.
*
* @section changes_2015_01_21_0 2015-01-21-0
* - added compatibility profile for Lua 5.3 featuring:
*  + added @ref lua::Valref::linked "linked" accessor to read and write values associated with userdata;
*  + added new Lua-side operations in function form: @ref idiv "integer division",
* @ref band "bitwise AND", @ref bor "bitwise OR", @ref bxor "bitwise XOR",
* @ref bneg "bitwise NOT", @ref shl "bit shift left", @ref shr "bit shift right";
*  + transparent change: integer types are promoted to Lua number/integer subtype;
*  + transparent change: table access with integer arguments now uses specialized geti/seti functions;
*  + removed deprecated @ref lua::Valref::optcast "optcast" function (still accessible in 5.1 and 5.2 modes);
* - breaking change: compatibility profile 5.3 is now default; the code targeting Lua 5.2 must @ref compatibility_5_2 "define" <code><b>LUAPP_COMPATIBILITY_V52</b></code> macro;
* - transparent change: concatenation and arithmetics are refactored to one-definition simplifying the codebase;
* - minor fixes in v2015-01-21-1:
*  + renamed lua_impl.cpp to impl.cpp and updated usage recommendations;
*  + moved test to separate directory.
*
* @section changes_2014_11_24_0 2014-11-24-0
* @li Added argument-checkging functions, @ref lua::Context::checkArgs "Context::checkArgs" and @ref lua::Context::requireArgs "Context::requireArgs"
* check types and amount of arguments passed to the function in @ref lua::Context::args "Context::args".
* First function performs silent check and returns boolean result while the second one
* raises Lua error with explanation if the check failed.
* @li Added new conversion function, @ref lua::Valref::to "to". Without argument, it performs unchecked conversion.
* Given backup value, it performs type check and returns backup if the type did not match,
* superseding @ref lua::Valref::optcast "optcast" which is now deprecated.
*
* @section changes_2014_10_29_0 2014-10-29-0
* @li Breaking change: @ref lua::Context::Registry::store "store" operation for registry now returns @ref lua::RegistryKey "RegistryKey"
* instead of <b><code>int</code></b>. It is still the same <b><code>int</code></b>, but it cannot be modified, assigned to, used in arithmetics etc.
*
* @section changes_2014_09_22_0 2014-09-22-0
* @li @ref lua::Table::iterate "Table::iterate" now accepts bool- and void-returning callbacks, and checks its compatibility with static assert;
* @li fixed closure-handling utilities in 5.1 mode.
*
* @section changes_2014_09_18_0 2014-09-18-0
* @li Added closure handling into @ref lua::Valref "value objects": read and write @ref lua::Valref::upvalue "upvalues",
* @ref lua::Valref::getUpvalues "query" upvalue value-name pairs and @ref lua::Valref::getClosureInfo "get" general closure info.
*
* @section changes_2014_09_09_0 2014-09-09-0
* @li Removed "explicit" qualifier on @ref lua::Table "Table"(@ref lua::Valref "Valref") constructor, allowing assign-form @ref lua::Table "Table" creation.
*
* @section changes_2014_09_01_0 2014-09-01-0
* @li Fixed issue with wrapping functions that returned a reference.
*
* @section changes_2014_08_29_0 2014-08-29-0
* @li Added auto-wrapping of member functions;
* @li added support for <b>long long</b> and <b>unsigned long long</b> native types;
* @li added motivational example.
*
* @section changes_2014_08_28_0 2014-08-28-0
* @li Temporary interface marked as rvalue-only;
* @li added missing std::string counterparts to some functions in @ref lua::State "State"
* and @ref lua::Context "Context";
* @li added creation of @ref lua::Context::closure "closures" from @ref lua::LFunction "LFunction"
* and automatic promotion of @ref lua::LFunction "LFunction";
* @li added automatic promotion of generic C functions.
*
* @section changes_2014_08_18_0 2014-08-18-0
* @li Initial release.
*/
